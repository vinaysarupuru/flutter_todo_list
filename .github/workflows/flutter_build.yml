name: Flutter Multiplatform Test Builds

on:
  push:
    branches:
      - main
  release:
    types: [created, published, prereleased]
  workflow_dispatch:
    inputs:
      release_mode:
        description: 'Build in release mode'
        type: boolean
        default: true

jobs:
  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - name: Build Android APKs for different architectures
        run: |
          echo "Building APKs for different device architectures"
          flutter build apk --release --split-per-abi
      - name: Create Android artifacts
        run: |
          mkdir -p android-builds
          
          # Check for architecture-specific APKs
          if [ -d "build/app/outputs/flutter-apk" ]; then
            echo "Android APK build directory found"
            # Copy all architecture-specific APKs to the artifacts directory
            cp build/app/outputs/flutter-apk/*-*.apk android-builds/ 2>/dev/null || true
            # Also copy universal APK if available
            cp build/app/outputs/flutter-apk/app-release.apk android-builds/universal.apk 2>/dev/null || true
            
            # Check if we actually copied any files
            if [ "$(ls -A android-builds/)" ]; then
              echo "Successfully copied APK files to android-builds/"
            else
              echo "No APK files found, creating placeholder"
              echo "Android build failed to produce APKs" > android-builds/build-failed.txt
            fi
          else
            echo "Android APK build directory not found, creating placeholder"
            echo "Android build failed to produce APKs" > android-builds/build-failed.txt
          fi
          
          # Create a zip with all APKs for easier download
          zip -j android-all-builds.zip android-builds/*
      - uses: actions/upload-artifact@v4
        with:
          name: android-release-apks
          path: android-builds/
        if: always()
      - uses: actions/upload-artifact@v4
        with:
          name: android-all-builds.zip
          path: android-all-builds.zip
        if: always()

  ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - name: Build iOS release
        run: |
          flutter clean
          flutter build ios --release --no-codesign
      - name: Debug iOS build artifacts
        run: |
          echo "Listing build directory contents:"
          ls -la build/
          if [ -d "build/ios" ]; then
            echo "iOS build directory contents:"
            ls -la build/ios/
            echo "Searching for app bundles:"
            find build -name "*.app" -type d
          fi
      - name: Create iOS artifact
        run: |
          # Create a zip file with whatever we have in the build directory
          cd build
          if [ -d "ios" ]; then
            zip -r ios-artifact.zip ios
            echo "Created iOS artifact from build output"
          else
            # Create a minimal artifact indicating the build issue
            echo "iOS build did not produce expected output" > ios-artifact.zip
            echo "Created placeholder artifact"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ios-release-build
          path: build/ios-artifact.zip
        if: always()

  web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build web --release
      - name: Create Web artifact
        run: |
          if [ -d "build/web" ]; then
            echo "Web build found, creating zip"
            zip -r web.zip build/web
          else
            echo "Web build not found, creating placeholder"
            echo "Web build failed to produce output" > web.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: web-release.zip
          path: web.zip
        if: always()

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: choco install visualstudio2022buildtools -y  # Install required tools
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: pwsh
      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      - run: flutter build windows --release
      - name: Debug Windows build artifacts
        run: |
          Write-Host "Listing build directory contents:"
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Force -Directory | ForEach-Object { 
              Write-Host "Directory: $_"
              Get-ChildItem -Path "$_" -Recurse -Force
            }
          } else {
            Write-Host "Build directory not found"
          }
          
          # Search for the exe file regardless of path
          Write-Host "Searching for .exe files:"
          $exeFiles = Get-ChildItem -Path . -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue
          foreach ($file in $exeFiles) {
            Write-Host "Found EXE: $($file.FullName)"
          }
        shell: pwsh
      - name: Create Self-Contained EXE with Inno Setup
        run: |
          # Look for the exe file
          $exeFile = Get-ChildItem -Path . -Include "flutter_todo_list.exe" -File -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if ($exeFile) {
            Write-Host "Found Windows exe file at: $($exeFile.FullName)"
            $exeDir = Split-Path -Parent $exeFile.FullName
            
            # Create Inno Setup script
            $setupScript = @"
            [Setup]
            AppName=Flutter Todo List
            AppVersion=1.0
            DefaultDirName={autopf}\Flutter Todo List
            DefaultGroupName=Flutter Todo List
            OutputDir=.
            OutputBaseFilename=TodoListSetup
            Compression=lzma
            SolidCompression=yes
            
            [Files]
            Source: "$exeDir\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
            
            [Icons]
            Name: "{group}\Flutter Todo List"; Filename: "{app}\flutter_todo_list.exe"
            Name: "{commondesktop}\Flutter Todo List"; Filename: "{app}\flutter_todo_list.exe"
            
            [Run]
            Filename: "{app}\flutter_todo_list.exe"; Description: "Launch Flutter Todo List"; Flags: nowait postinstall skipifsilent
            "@
            
            # Write Inno Setup script to file
            Set-Content -Path "setup.iss" -Value $setupScript
            
            # Run Inno Setup compiler
            Write-Host "Compiling installer with Inno Setup"
            & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "setup.iss"
            
            if (Test-Path "TodoListSetup.exe") {
              Write-Host "Successfully created self-contained Windows installer"
              # Create a separate zip with just the standalone EXE for portability
              Copy-Item "TodoListSetup.exe" -Destination "flutter_todo_list_installer.exe"
            } else {
              Write-Host "Failed to create installer, packaging directory instead"
              # Fall back to packaging directory if installer creation fails
              $tempDir = "windows-package"
              New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
              Copy-Item -Path "$exeDir\*" -Destination $tempDir -Recurse
              Compress-Archive -Path "$tempDir\*" -DestinationPath windows.zip -Force
            }
          } else {
            Write-Host "Windows executable not found, creating empty artifact"
            Set-Content -Path "windows.zip" -Value "Windows build did not produce expected .exe file"
          }
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: windows-installer.exe
          path: flutter_todo_list_installer.exe
        if: success() && hashFiles('flutter_todo_list_installer.exe') != ''
      - uses: actions/upload-artifact@v4
        with:
          name: windows-release.zip
          path: windows.zip
        if: always() && hashFiles('windows.zip') != ''

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build macos --release
      - name: Create macOS artifact
        run: |
          if [ -d "build/macos/Build/Products/Release" ]; then
            echo "macOS build found, creating zip"
            APP_FILES=$(find build/macos/Build/Products/Release -name "*.app" -type d)
            if [ -n "$APP_FILES" ]; then
              zip -r macos.zip $APP_FILES
              echo "Created macOS zip with app files"
            else
              echo "No .app files found in macOS build"
              echo "macOS build did not produce app files" > macos.zip
            fi
          else
            echo "macOS build directory not found, creating placeholder"
            echo "macOS build failed to produce output" > macos.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: macos-release.zip
          path: macos.zip
        if: always()

  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
      - run: flutter pub get
      - run: flutter config --enable-linux-desktop
      - run: flutter build linux --release
      - name: Create Linux artifact
        run: |
          if [ -d "build/linux/x64/release/bundle" ]; then
            echo "Linux build found, creating zip"
            zip -r linux.zip build/linux/x64/release/bundle
          else
            echo "Linux build directory not found, creating placeholder"
            echo "Linux build failed to produce output" > linux.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: linux-release.zip
          path: linux.zip
        if: always()

  release:
    runs-on: ubuntu-latest
    needs: [android, ios, web, windows, macos, linux]
    # Run if it's a release event OR if manually triggered with release_mode=true
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_mode == 'true')
    steps:
      - name: List workspace contents
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing workspace contents:"
          ls -la
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts:"
          find artifacts -type f | sort
      - name: Debug release info
        run: |
          echo "Is this a release? ${{ github.event_name == 'release' }}"
          echo "Is this a manual with release mode? ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_mode == 'true' }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Tag name: ${{ github.event.release.tag_name }}"
          echo "Event data: ${{ toJSON(github.event) }}"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/**/*.apk
            artifacts/**/*.exe
            artifacts/**/*.zip
          fail_on_unmatched_files: false
          draft: false
          generate_release_notes: true

  # Debug job always runs to help diagnose trigger issues
  debug-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Debug event info
        run: |
          echo "GitHub event name: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub workflow: ${{ github.workflow }}"
          echo "Is this a release event? ${{ github.event_name == 'release' }}"
          echo "Manual trigger: ${{ github.event_name == 'workflow_dispatch' }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Release mode set to: ${{ github.event.inputs.release_mode }}"
          fi
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Release action: ${{ github.event.action }}"
            echo "Release tag: ${{ github.event.release.tag_name }}"
          fi