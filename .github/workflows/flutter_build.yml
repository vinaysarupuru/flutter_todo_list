name: Flutter Multiplatform Build

on:
  push:
    branches: [main]
  release:
    types: [created, published, prereleased]
  workflow_dispatch:
    inputs:
      release_mode:
        description: 'Build in release mode'
        type: boolean
        default: true

env:
  FLUTTER_VERSION: '3.29.2'
  BUILD_MODE: ${{ github.event.inputs.release_mode == 'true' || github.event_name == 'release' && 'release' || 'debug' }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=v${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "tag=build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

  android:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle
      
      - name: Build Android
        run: |
          flutter pub get
          flutter build apk --${{ env.BUILD_MODE }} --split-per-abi
      
      - name: Package artifacts
        run: |
          mkdir -p artifacts
          find build/app/outputs/flutter-apk -name "*.apk" -exec cp {} artifacts/ \;
          
          # Create metadata file
          echo "Build: ${{ needs.setup.outputs.release_tag }}" > artifacts/BUILD_INFO.txt
          echo "Date: $(date)" >> artifacts/BUILD_INFO.txt
          echo "Commit: ${{ github.sha }}" >> artifacts/BUILD_INFO.txt
          
          # Create single ZIP for all APKs
          zip -j android-builds.zip artifacts/*
          
      - uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: artifacts/
          if-no-files-found: warn
          
      - uses: actions/upload-artifact@v4
        with:
          name: android-all-builds.zip
          path: android-builds.zip
          if-no-files-found: warn

  ios:
    needs: setup
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Build iOS
        run: |
          flutter pub get
          flutter build ios --${{ env.BUILD_MODE }} --no-codesign
          
      - name: Package artifacts
        run: |
          cd build
          # Find and zip all .app directories
          find ios -name "*.app" -type d | xargs zip -r ios-artifact.zip
          
          if [ ! -s ios-artifact.zip ]; then
            echo "iOS build failed to produce expected output" > ios-artifact.zip
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios-artifact.zip
          if-no-files-found: warn

  web:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Build Web
        run: |
          flutter pub get
          flutter build web --${{ env.BUILD_MODE }}
          
      - name: Package artifacts
        run: |
          if [ -d "build/web" ]; then
            # Add version info file
            echo "Build: ${{ needs.setup.outputs.release_tag }}" > build/web/BUILD_INFO.txt
            zip -r web-build.zip build/web
          fi
          
      - uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web-build.zip
          if-no-files-found: warn

  desktop:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        platform: [windows, macos, linux]
        include:
          - platform: windows
            os: windows-latest
            artifact_name: windows-build
            setup_cmd: choco install visualstudio2022buildtools innosetup -y
            build_cmd: flutter build windows --release
            package_cmd: |
              $exeFile = Get-ChildItem -Path . -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($exeFile) {
                $exeDir = Split-Path -Parent $exeFile.FullName
                # Create Inno Setup script
                $setupScript = @"
              [Setup]
              AppName=Flutter App
              AppVersion=1.0
              DefaultDirName={autopf}\Flutter App
              DefaultGroupName=Flutter App
              OutputDir=.
              OutputBaseFilename=flutter_app_setup
              Compression=lzma
              SolidCompression=yes

              [Files]
              Source: "$($exeDir)\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

              [Icons]
              Name: "{group}\Flutter App"; Filename: "{app}\$($exeFile.Name)"
              Name: "{commondesktop}\Flutter App"; Filename: "{app}\$($exeFile.Name)"
              "@
                Set-Content -Path "setup.iss" -Value $setupScript
                & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "setup.iss"
                if (Test-Path "flutter_app_setup.exe") {
                  Move-Item "flutter_app_setup.exe" -Destination "windows-installer.exe"
                }
                # Also package as ZIP
                Compress-Archive -Path "$exeDir\*" -DestinationPath windows-build.zip -Force
              } else {
                Set-Content -Path "windows-build.zip" -Value "Build failed"
              }
            shell: pwsh
          - platform: macos
            os: macos-latest
            artifact_name: macos-build
            setup_cmd: ""
            build_cmd: flutter build macos --release
            package_cmd: |
              APPFILES=$(find build/macos/Build/Products/Release -name "*.app" -type d)
              if [ -n "$APPFILES" ]; then
                # Create DMG if possible
                zip -r macos-build.zip $APPFILES
              else
                echo "Build failed" > macos-build.zip
              fi
            shell: bash
          - platform: linux
            os: ubuntu-latest
            artifact_name: linux-build
            setup_cmd: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
            build_cmd: flutter build linux --release
            package_cmd: |
              if [ -d "build/linux/x64/release/bundle" ]; then
                # Add version info
                echo "Build: ${{ needs.setup.outputs.release_tag }}" > build/linux/x64/release/bundle/BUILD_INFO.txt
                zip -r linux-build.zip build/linux/x64/release/bundle
              else
                echo "Build failed" > linux-build.zip
              fi
            shell: bash
            
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          
      - name: Setup platform dependencies
        run: ${{ matrix.setup_cmd }}
        shell: ${{ matrix.shell }}
        
      - name: Enable desktop
        run: flutter config --enable-${{ matrix.platform }}-desktop
        
      - name: Build
        run: |
          flutter pub get
          ${{ matrix.build_cmd }}
        shell: ${{ matrix.shell }}
        
      - name: Package artifacts
        run: ${{ matrix.package_cmd }}
        shell: ${{ matrix.shell }}
        
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.platform }}-build.zip
          if-no-files-found: warn
          
      - uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer.exe
          if-no-files-found: ignore
        if: matrix.platform == 'windows' && hashFiles('windows-installer.exe') != ''

  release:
    needs: [setup, android, ios, web, desktop]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_mode == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy all relevant files
          find all-artifacts -type f -not -path "*/\.*" -exec cp {} release-assets/ \;
          # Remove duplicate files & organize
          cd release-assets
          ls -la
          
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: release-assets/*
          fail_on_unmatched_files: false
          draft: false
          generate_release_notes: true
          tag_name: ${{ needs.setup.outputs.release_tag }}