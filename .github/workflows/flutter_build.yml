name: Flutter Multiplatform Test Builds

on:
  push:
    branches:
      - main
  release:
     types: [created, published, prereleased]

jobs:
  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      # Build single APK
      - run: flutter build apk --release
      # Build split APKs
      - run: flutter build apk --split-per-abi --release
      - name: Create Android artifacts
        run: |
          # Check for single APK
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "Single APK found"
          else
            echo "Single APK not found, creating placeholder"
            mkdir -p build/app/outputs/flutter-apk
            echo "Android build failed to produce APK" > build/app/outputs/flutter-apk/app-release.apk
          fi
          
          # Check for split APKs
          if [ -f "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk" ] || \
             [ -f "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" ] || \
             [ -f "build/app/outputs/flutter-apk/app-x86_64-release.apk" ]; then
            echo "Split APKs found"
            # Create a zip of all split APKs
            cd build/app/outputs/flutter-apk
            zip split-apks.zip *-release.apk
            cd ../../../..
          else
            echo "Split APKs not found, creating placeholder"
            echo "Android build failed to produce split APKs" > build/app/outputs/flutter-apk/split-apks.zip
          fi
      # Upload single APK
      - uses: actions/upload-artifact@v4
        with:
          name: android-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk
        if: always()
      # Upload split APKs
      - uses: actions/upload-artifact@v4
        with:
          name: android-split-apks.zip
          path: build/app/outputs/flutter-apk/split-apks.zip
        if: always()

  ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - name: Build iOS release
        run: |
          flutter clean
          flutter build ios --release --no-codesign
      - name: Debug iOS build artifacts
        run: |
          echo "Listing build directory contents:"
          ls -la build/
          if [ -d "build/ios" ]; then
            echo "iOS build directory contents:"
            ls -la build/ios/
            echo "Searching for app bundles:"
            find build -name "*.app" -type d
          fi
      - name: Create iOS artifact
        run: |
          # Create a zip file with whatever we have in the build directory
          cd build
          if [ -d "ios" ]; then
            zip -r ios-artifact.zip ios
            echo "Created iOS artifact from build output"
          else
            # Create a minimal artifact indicating the build issue
            echo "iOS build did not produce expected output" > ios-artifact.zip
            echo "Created placeholder artifact"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ios-release-build
          path: build/ios-artifact.zip
        if: always()

  web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build web --release
      - name: Create Web artifact
        run: |
          if [ -d "build/web" ]; then
            echo "Web build found, creating zip"
            zip -r web.zip build/web
          else
            echo "Web build not found, creating placeholder"
            echo "Web build failed to produce output" > web.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: web-release.zip
          path: web.zip
        if: always()

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - name: Install Windows build dependencies
        run: |
          choco install visualstudio2022buildtools --params "--add Microsoft.VisualStudio.Component.Windows10SDK.19041 --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.ComponentGroup.UWP.Support" -y
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install innosetup -y
          Write-Host "Installed Visual Studio Build Tools and dependencies"
      
      - name: Build Windows App
        run: |
          Write-Host "Configuring Flutter for Windows..."
          flutter config --enable-windows-desktop
          flutter doctor -v
          
          Write-Host "Cleaning previous build artifacts..."
          Remove-Item -Path "build" -Recurse -Force -ErrorAction SilentlyContinue
          flutter clean
          
          Write-Host "Getting dependencies..."
          flutter pub get
          
          Write-Host "Building Windows app in Release mode..."
          flutter build windows --release --verbose --target-platform windows-x64
          
          # Wait for build to complete and verify output
          Write-Host "Waiting for build output to be ready..."
          Start-Sleep -Seconds 10
          
          Write-Host "Checking build directory structure:"
          if (Test-Path "build\windows") {
              Get-ChildItem "build\windows" -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
                  Write-Host $_.FullName
              }
          } else {
              Write-Host "build\windows directory not found!"
          }
          
          # Wait for file system and verify build
      - name: Create Installer
        shell: pwsh
        run: |
          Start-Sleep -Seconds 10
          
          Write-Host "Searching for Windows build artifacts..."
          $possibleLocations = @(
              "build\windows\runner\Release",
              "build\windows\x64\runner\Release",
              "build\windows\runner\Debug",
              "build\windows\x64\runner\Debug"
          )
          
          $BUILD_DIR = $null
          foreach ($location in $possibleLocations) {
              Write-Host "Checking $location..."
              if (Test-Path $location) {
                  Write-Host "Found build directory at: $location"
                  $BUILD_DIR = $location
                  break
              }
          }
          
          if ($null -eq $BUILD_DIR) {
              Write-Host "No build directory found in expected locations!"
              Write-Host "Searching for .exe files in entire build directory..."
              Get-ChildItem -Path "build" -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
                  Write-Host "Found EXE: $($_.FullName)"
                  $BUILD_DIR = Split-Path -Parent $_.FullName
              }
          }
          
          if ($null -eq $BUILD_DIR) {
              Write-Error "Could not locate build directory with executable!"
              exit 1
          }
          Write-Host "Analyzing build directory contents:"
          Get-ChildItem -Path $BUILD_DIR -Recurse | ForEach-Object {
              Write-Host "$($_.FullName) - Size: $((Get-Item $_.FullName).Length) bytes"
          }
          
          $exeFiles = Get-ChildItem -Path $BUILD_DIR -Include "*.exe" -File -Recurse
          if ($exeFiles.Count -eq 0) {
              Write-Error "No .exe files found in build directory!"
              Write-Host "Build directory contents:"
              Get-ChildItem -Path $BUILD_DIR -Recurse
              exit 1
          }
          Write-Host "Found $($exeFiles.Count) .exe files in build directory"
          
          # Create Inno Setup script
          $APP_NAME = "Flutter Todo List"
          $APP_VERSION = "1.0.0"
          $PUBLISHER = "Your Company Name"
          
          # Get the first exe file found
          $mainExe = $exeFiles | Select-Object -First 1
          $SOURCE_DIR = Split-Path -Parent $mainExe.FullName
          $exeName = Split-Path -Leaf $mainExe.FullName
          
          Write-Host "Using executable: $($mainExe.FullName)"
          Write-Host "Source directory: $SOURCE_DIR"
          
          # Verify all required DLLs are present
          Write-Host "Checking for required DLLs..."
          Get-ChildItem -Path $SOURCE_DIR -Filter "*.dll" | ForEach-Object {
              Write-Host "Found DLL: $($_.Name)"
          }
          
          Write-Host "Preparing Inno Setup with source directory: $SOURCE_DIR"
          
          # Create Inno Setup script with dynamic executable name
          $INNO_SCRIPT = "# Inno Setup Script generated for Flutter Windows build`n"
          $INNO_SCRIPT += "[Setup]`n"
          $INNO_SCRIPT += "AppId={{6EC7C760-D9E7-4736-A2E5-6DB4C8E0CAA1}`n"
          $INNO_SCRIPT += "AppName=$APP_NAME`n"
          $INNO_SCRIPT += "AppVersion=$APP_VERSION`n"
          $INNO_SCRIPT += "AppVerName=$APP_NAME $APP_VERSION`n"
          $INNO_SCRIPT += "AppPublisher=$PUBLISHER`n"
          $INNO_SCRIPT += "AppSupportURL=https://github.com/yourusername/flutter_todo_list`n"
          $INNO_SCRIPT += "DefaultDirName={autopf}\$APP_NAME`n"
          $INNO_SCRIPT += "DefaultGroupName=$APP_NAME`n"
          $INNO_SCRIPT += "OutputDir=build\windows\installer`n"
          $INNO_SCRIPT += "OutputBaseFilename=flutter_todo_list_setup`n"
          $INNO_SCRIPT += "Compression=lzma`n"
          $INNO_SCRIPT += "SolidCompression=yes`n"
          $INNO_SCRIPT += "UninstallDisplayIcon={app}\$exeName`n"
          $INNO_SCRIPT += "MinVersion=6.0`n"
          $INNO_SCRIPT += "WorkingDir={app}`n"
          $INNO_SCRIPT += "PrivilegesRequired=lowest`n"
          $INNO_SCRIPT += "DisableProgramGroupPage=yes`n"
          $INNO_SCRIPT += "CloseApplications=force`n"
          $INNO_SCRIPT += "WizardStyle=modern`n"
          $INNO_SCRIPT += "SetupIconFile=windows\runner\resources\app_icon.ico`n"
          $INNO_SCRIPT += "LicenseFile=LICENSE`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[Languages]`n"
          $INNO_SCRIPT += "Name: `"english`"; MessagesFile: `"compiler:Default.isl`"`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[Messages]`n"
          $INNO_SCRIPT += "WelcomeLabel2=This will install [name] on your computer.%n%nIt is recommended that you close all other applications before continuing.`n"
          $INNO_SCRIPT += "FinishedLabel=Setup has finished installing [name] on your computer. The application may be launched by selecting the installed shortcuts.`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[Files]`n"
          $INNO_SCRIPT += "Source: `"$($SOURCE_DIR -replace '\\','\\\\')\*`"; DestDir: `"{app}`"; Flags: ignoreversion recursesubdirs createallsubdirs`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[Icons]`n"
          $INNO_SCRIPT += "Name: `"{group}\$APP_NAME`"; Filename: `"{app}\$exeName`"`n"
          $INNO_SCRIPT += "Name: `"{autodesktop}\$APP_NAME`"; Filename: `"{app}\$exeName`"`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[Run]`n"
          $INNO_SCRIPT += "Filename: `"{app}\$exeName`"; Description: `"Launch Flutter Todo List now`"; Flags: postinstall nowait skipifsilent`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[UninstallRun]`n"
          $INNO_SCRIPT += "Filename: `"taskkill.exe`"; Parameters: `"/F /IM $exeName`"; Flags: runhidden`n"
          $INNO_SCRIPT += "`n"
          $INNO_SCRIPT += "[UninstallDelete]`n"
          $INNO_SCRIPT += "Type: filesandordirs; Name: `"{app}`"`n"
          
          $INNO_SCRIPT | Out-File -FilePath "installer_script.iss" -Encoding UTF8
          
          # Compile installer
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installer_script.iss
      - name: Debug Windows build artifacts
        run: |
          Write-Host "Listing build directory contents:"
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Force -Directory | ForEach-Object { 
              Write-Host "Directory: $_"
              Get-ChildItem -Path "$_" -Recurse -Force
            }
          } else {
            Write-Host "Build directory not found"
          }
          
          # Search for the exe file regardless of path
          Write-Host "Searching for .exe files:"
          $exeFiles = Get-ChildItem -Path . -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue
          foreach ($file in $exeFiles) {
            Write-Host "Found EXE: $($file.FullName)"
          }
        shell: pwsh
      - name: Create Windows artifacts
        run: |
          Write-Host "Creating Windows artifacts..."
          
          # First try to find the executable in the expected Release directory
          $exeFile = Get-ChildItem -Path "build\windows\runner\Release" -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
          # If not found in Release, search entire build directory
          if (-not $exeFile) {
              Write-Host "Executable not found in Release directory, searching build directory..."
              $exeFile = Get-ChildItem -Path "build" -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue | 
                  Where-Object { $_.FullName -notlike "*installer*" } |
                  Select-Object -First 1
          }
          
          if ($exeFile) {
              Write-Host "Found Windows exe file at: $($exeFile.FullName)"
              $exeDir = Split-Path -Parent $exeFile.FullName
              
              # Create temporary directory for package
              $tempDir = "windows-package"
              New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
              
              # Copy all files from build directory
              Write-Host "Copying files to package directory..."
              Copy-Item -Path "$exeDir\*" -Destination $tempDir -Recurse
              
              # Log package contents
              Write-Host "Package contents:"
              Get-ChildItem -Path $tempDir -Recurse | ForEach-Object {
                  Write-Host " - $($_.FullName) - Size: $((Get-Item $_.FullName).Length) bytes"
              }
              
              # Create zip archive
              Write-Host "Creating zip archive..."
              Compress-Archive -Path "$tempDir\*" -DestinationPath windows.zip -Force
              
              if (Test-Path windows.zip) {
                  $zipSize = (Get-Item windows.zip).Length
                  Write-Host "Successfully created Windows zip artifact (Size: $zipSize bytes)"
              } else {
                  Write-Error "Failed to create zip archive!"
                  exit 1
              }
          } else {
              Write-Host "Windows executable not found in any location"
              Set-Content -Path windows.zip -Value "Windows build did not produce expected .exe file"
          }
          
          # Check for Inno Setup installer
          if (Test-Path "build\windows\installer\flutter_todo_list_setup.exe") {
            Write-Host "Inno Setup installer created successfully"
          } else {
            Write-Host "Inno Setup installer not found, creating empty file"
            New-Item -Path "build\windows\installer" -ItemType Directory -Force | Out-Null
            Set-Content -Path "build\windows\installer\flutter_todo_list_setup.exe" -Value "Installer creation failed"
          }
        shell: pwsh
      
      # Upload zip artifact
      - uses: actions/upload-artifact@v4
        with:
          name: windows-release.zip
          path: windows.zip
        if: always()
      
      # Upload installer artifact
      - uses: actions/upload-artifact@v4
        with:
          name: windows-installer.exe
          path: build/windows/installer/flutter_todo_list_setup.exe
        if: always()

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build macos --release
      - name: Create macOS artifact
        run: |
          if [ -d "build/macos/Build/Products/Release" ]; then
            echo "macOS build found, creating zip"
            APP_FILES=$(find build/macos/Build/Products/Release -name "*.app" -type d)
            if [ -n "$APP_FILES" ]; then
              zip -r macos.zip $APP_FILES
              echo "Created macOS zip with app files"
            else
              echo "No .app files found in macOS build"
              echo "macOS build did not produce app files" > macos.zip
            fi
          else
            echo "macOS build directory not found, creating placeholder"
            echo "macOS build failed to produce output" > macos.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: macos-release.zip
          path: macos.zip
        if: always()

  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
      - run: flutter pub get
      - run: flutter config --enable-linux-desktop
      - run: flutter build linux --release
      - name: Create Linux artifact
        run: |
          if [ -d "build/linux/x64/release/bundle" ]; then
            echo "Linux build found, creating zip"
            zip -r linux.zip build/linux/x64/release/bundle
          else
            echo "Linux build directory not found, creating placeholder"
            echo "Linux build failed to produce output" > linux.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: linux-release.zip
          path: linux.zip
        if: always()

  release:
    runs-on: ubuntu-latest
    needs: [android, ios, web, windows, macos, linux]
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/**/*.apk
            artifacts/**/*.ipa
            artifacts/**/*.zip
            artifacts/**/*.exe
