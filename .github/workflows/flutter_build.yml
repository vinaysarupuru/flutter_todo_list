name: Flutter Multiplatform Test Builds

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build apk --release
      - name: Create Android artifact
        run: |
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "Android APK found, creating artifact"
          else
            echo "Android APK not found, creating placeholder"
            mkdir -p build/app/outputs/flutter-apk
            echo "Android build failed to produce APK" > build/app/outputs/flutter-apk/app-release.apk
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: android-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk
        if: always()

  ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - name: Build iOS release
        run: |
          flutter clean
          flutter build ios --release --no-codesign
      - name: Debug iOS build artifacts
        run: |
          echo "Listing build directory contents:"
          ls -la build/
          if [ -d "build/ios" ]; then
            echo "iOS build directory contents:"
            ls -la build/ios/
            echo "Searching for app bundles:"
            find build -name "*.app" -type d
          fi
      - name: Create iOS artifact
        run: |
          # Create a zip file with whatever we have in the build directory
          cd build
          if [ -d "ios" ]; then
            zip -r ios-artifact.zip ios
            echo "Created iOS artifact from build output"
          else
            # Create a minimal artifact indicating the build issue
            echo "iOS build did not produce expected output" > ios-artifact.zip
            echo "Created placeholder artifact"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ios-release-build
          path: build/ios-artifact.zip
        if: always()

  web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build web --release
      - name: Create Web artifact
        run: |
          if [ -d "build/web" ]; then
            echo "Web build found, creating zip"
            zip -r web.zip build/web
          else
            echo "Web build not found, creating placeholder"
            echo "Web build failed to produce output" > web.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: web-release.zip
          path: web.zip
        if: always()

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: choco install visualstudio2022buildtools -y  # Install required tools
      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      - run: flutter build windows --release
      - name: Debug Windows build artifacts
        run: |
          Write-Host "Listing build directory contents:"
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Force -Directory | ForEach-Object { 
              Write-Host "Directory: $_"
              Get-ChildItem -Path "$_" -Recurse -Force
            }
          } else {
            Write-Host "Build directory not found"
          }
          
          # Search for the exe file regardless of path
          Write-Host "Searching for .exe files:"
          $exeFiles = Get-ChildItem -Path . -Include "*.exe" -File -Recurse -ErrorAction SilentlyContinue
          foreach ($file in $exeFiles) {
            Write-Host "Found EXE: $($file.FullName)"
          }
        shell: pwsh
      - name: Create Windows artifact
        run: |
          # Look for the exe file in the expected locations
          $exeFile = Get-ChildItem -Path . -Include "flutter_todo_list.exe" -File -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if ($exeFile) {
            Write-Host "Found Windows exe file at: $($exeFile.FullName)"
            $exeDir = Split-Path -Parent $exeFile.FullName
            
            # Copy all required DLLs and resources from the same directory
            Write-Host "Creating standalone Windows package with all required files"
            $tempDir = "windows-package"
            New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
            
            # Copy all files from the exe directory
            Copy-Item -Path "$exeDir\*" -Destination $tempDir -Recurse
            
            # Create the zip file
            Compress-Archive -Path "$tempDir\*" -DestinationPath windows.zip -Force
            Write-Host "Successfully created Windows artifact"
          } else {
            Write-Host "Windows executable not found, creating empty artifact"
            Set-Content -Path windows.zip -Value "Windows build did not produce expected .exe file"
          }
        shell: pwsh
      - uses: actions/upload-artifact@v4
        with:
          name: windows-release.zip
          path: windows.zip
        if: always()

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - run: flutter pub get
      - run: flutter build macos --release
      - name: Create macOS artifact
        run: |
          if [ -d "build/macos/Build/Products/Release" ]; then
            echo "macOS build found, creating zip"
            APP_FILES=$(find build/macos/Build/Products/Release -name "*.app" -type d)
            if [ -n "$APP_FILES" ]; then
              zip -r macos.zip $APP_FILES
              echo "Created macOS zip with app files"
            else
              echo "No .app files found in macOS build"
              echo "macOS build did not produce app files" > macos.zip
            fi
          else
            echo "macOS build directory not found, creating placeholder"
            echo "macOS build failed to produce output" > macos.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: macos-release.zip
          path: macos.zip
        if: always()

  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
      - run: flutter pub get
      - run: flutter config --enable-linux-desktop
      - run: flutter build linux --release
      - name: Create Linux artifact
        run: |
          if [ -d "build/linux/x64/release/bundle" ]; then
            echo "Linux build found, creating zip"
            zip -r linux.zip build/linux/x64/release/bundle
          else
            echo "Linux build directory not found, creating placeholder"
            echo "Linux build failed to produce output" > linux.zip
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: linux-release.zip
          path: linux.zip
        if: always()

  release:
    runs-on: ubuntu-latest
    needs: [android, ios, web, windows, macos, linux]
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/**/*.apk
            artifacts/**/*.ipa
            artifacts/**/*.zip